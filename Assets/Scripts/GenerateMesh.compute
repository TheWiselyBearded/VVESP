#pragma kernel GenerateMesh

// Input buffers
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float2> uvs;
RWStructuredBuffer<int> triangles;
Texture2D<float4> colorTexture;
StructuredBuffer<float> depthBuffer;

// Camera parameters
float fx, fy, tx, ty;
uint width, height;

// Depth validation parameters
float minDepth;
float maxDepth;
float maxDepthDiscontinuity;
float maxSurfaceAngle;

// Forward declarations
bool IsValidDepth(float depth);
float3 DepthToWorld(uint2 pixel, float depth);
bool IsGradientTooSteep(float d1, float d2, float maxGradient);
float3 CalculateNormal(float3 v1, float3 v2, float3 v3);
bool ShouldCreateQuad(float d00, float d10, float d01, float d11, float3 p00, float3 p10, float3 p01, float3 p11);

// Function implementations
bool IsValidDepth(float depth)
{
    return depth >= minDepth && depth <= maxDepth;
}

float3 CalculateNormal(float3 v1, float3 v2, float3 v3)
{
    float3 edge1 = v2 - v1;
    float3 edge2 = v3 - v1;
    return normalize(cross(edge1, edge2));
}

float3 DepthToWorld(uint2 pixel, float depth)
{
    if (!IsValidDepth(depth))
        return float3(0, 0, 0);
        
    float x = (pixel.x - tx) * depth / fx;
    float y = (pixel.y - ty) * depth / fy;
    return float3(x, -y, -depth);
}

bool IsGradientTooSteep(float d1, float d2, float maxGradient)
{
    if (!IsValidDepth(d1) || !IsValidDepth(d2))
        return true;
        
    float gradientPercentage = abs(d1 - d2) / min(d1, d2);
    return gradientPercentage > maxGradient;
}

bool ShouldCreateQuad(float d00, float d10, float d01, float d11, float3 p00, float3 p10, float3 p01, float3 p11)
{
    if (!IsValidDepth(d00) || !IsValidDepth(d10) || 
        !IsValidDepth(d01) || !IsValidDepth(d11))
        return false;
        
    bool isHorizontalOK = !IsGradientTooSteep(d00, d10, maxDepthDiscontinuity) && 
                         !IsGradientTooSteep(d01, d11, maxDepthDiscontinuity);
                         
    bool isVerticalOK = !IsGradientTooSteep(d00, d01, maxDepthDiscontinuity) && 
                       !IsGradientTooSteep(d10, d11, maxDepthDiscontinuity);
    
    float3 n1 = CalculateNormal(p00, p10, p01);
    float3 n2 = CalculateNormal(p10, p11, p01);
    float angle = degrees(acos(dot(n1, n2)));
    bool isAngleOK = angle <= maxSurfaceAngle;
    
    return isHorizontalOK && isVerticalOK && isAngleOK;
}

[numthreads(8,8,1)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width-1 || id.y >= height-1) return;
    
    uint currentPixel = id.y * width + id.x;
    uint rightPixel = currentPixel + 1;
    uint bottomPixel = (id.y + 1) * width + id.x;
    uint bottomRightPixel = bottomPixel + 1;
    
    float d00 = depthBuffer[currentPixel];
    float d10 = depthBuffer[rightPixel];
    float d01 = depthBuffer[bottomPixel];
    float d11 = depthBuffer[bottomRightPixel];
    
    float3 p00 = DepthToWorld(uint2(id.x, id.y), d00);
    float3 p10 = DepthToWorld(uint2(id.x + 1, id.y), d10);
    float3 p01 = DepthToWorld(uint2(id.x, id.y + 1), d01);
    float3 p11 = DepthToWorld(uint2(id.x + 1, id.y + 1), d11);
    
    if (ShouldCreateQuad(d00, d10, d01, d11, p00, p10, p01, p11))
    {
        vertices[currentPixel] = p00;
        vertices[rightPixel] = p10;
        vertices[bottomPixel] = p01;
        vertices[bottomRightPixel] = p11;
        
        float2 uvScale = float2(1.0f / width, 1.0f / height);
        uvs[currentPixel] = float2(id.x, id.y) * uvScale;
        uvs[rightPixel] = float2(id.x + 1, id.y) * uvScale;
        uvs[bottomPixel] = float2(id.x, id.y + 1) * uvScale;
        uvs[bottomRightPixel] = float2(id.x + 1, id.y + 1) * uvScale;
        
        uint triIndex = (id.y * (width-1) + id.x) * 6;
        triangles[triIndex] = currentPixel;
        triangles[triIndex + 1] = bottomPixel;
        triangles[triIndex + 2] = rightPixel;
        triangles[triIndex + 3] = rightPixel;
        triangles[triIndex + 4] = bottomPixel;
        triangles[triIndex + 5] = bottomRightPixel;
    }
}